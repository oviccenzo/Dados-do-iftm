#A biblioteca tkinter é a responsável por criar elementos
#gráficos - tela, labels, botões. Nós iremos utilizar
#as classes e outros elementos existentes nessa
# biblioteca para construírmos nossa interface com o
# usuário.
import tkinter as tk
from tkinter import ttk

def gravarArquivo():
    # Após a finalização do sistema pelo usuário. Ou seja após o usuário escolher
    # a opção 5, devemos gravar as informações no arquivo novamente.
    arquivo = open("C:/Users/01516449690/Desktop/trabalho/cadastro.txt", "w")
    # Percorre a lista de clientes
    for i in clientes:
        # Acrescenta o cliente ao arquivo final
        arquivo.write(i.cpf + '\n')
        arquivo.write(i.nome + '\n')
        arquivo.write(i.endereco + '\n')
        arquivo.write(i.telefone + '\n')
    # Fecha o Arquivo
    arquivo.close()
    janela.destroy()

def carregarClientes():
    for i in clientes:
        if(comboCliente.get()==i.nome):
            textoNome.delete("1.0","end")
            textoCPF.delete("1.0","end")
            textoTelefone.delete("1.0","end")
            textoEndereço.delete("1.0","end")
            textoNome.insert("1.0",i.nome)
            textoCPF.insert("1.0",i.cpf)
            textoTelefone.insert("1.0",i.telefone)
            textoEndereço.insert("1.0",i.endereco)

def inserirClientes():
    novoCliente = Cliente(textoCPF.get("1.0","end-1c"),textoNome.get("1.0","end-1c"),textoEndereço.get("1.0","end-1c"),textoTelefone.get("1.0","end-1c"))
    clientes.append(novoCliente)
    # vetorOpcoes.append(novoCliente.nome)
    my_insert()

def my_insert(): # adding data to Combobox
    #if e1.get() not in cb1['values']:
    comboCliente['values'] +=(textoNome.get("1.0","end-1c"),) # add option

def remove_combo(): # removing option from the Combobox
    my_new=[] # Blank list to hold new values
    for opt in comboCliente['values']: # Loop through all options
        if(opt != comboCliente.get()):
            #print(opt)
            my_new.append(opt) # Add to new list
    comboCliente['values']=my_new # assign to new list
    comboCliente.delete(0,'end') # remove from current selection text
    comboCliente.current()

def apagarClientes():
    for cliente in clientes:
        if (comboCliente.get()==cliente.nome):
            clientes.remove(cliente)
            remove_combo()


def alterarClientes():
    print("inserirClientes")

#Criando uma classe - um novo tipo de dados. No nosso caso a Classe
#tem o nome de Cliente e possuí quatro atributos(características)
#cpf,nome,idade,telefone.

class Cliente:
    #Método Construtor chamado _init_. É o método responsável por
    #reservar o espaço na memória no momento que uma variável(objeto
    #ou instância da classe) é criada. No nosso caso além dos quatro
    #atributos recebe como parâmetro o atributo self. Que faz referência
    #a variável que será criada.
    def _init_(self,cpf,nome,endereco,telefone):
        self.cpf = cpf
        self.nome = nome
        self.endereco = endereco
        self.telefone = telefone
#Criamos uma lista de Clientes Vazia - sem nenhum cliente
clientes = []
#O comando open abre um arquivo e lê o mesmo. O comando possui dois parametros
#Endereço do Arquivo no HD - C:/Users/29963905803/Documents/clientes.txt no
#nosso caso. E o segundo parametro indica o que poderemos fazer no arquivo
#No nosso caso o parâmetro é o "r" - que indica que apenas iremos ler o
#o arquivo
arquivo = open("C:/Users/01516449690/Desktop/trabalho/cadastro.txt", "r")
contadorDelinha = 0
#Percorre todas as linhas do arquivo através do comando readlines()
for linha in arquivo.readlines():
    #Cada linha do nosso arquivo indica o nome de um cliente.
    #Dessa forma iremos acrescentar cada linha do arquivo na lista
    #de cliente atráves do comando Append
    #O arquivo traz consigo as quebras de linha. Por isso utilizamos
    # o comando strip para retirar as quebras de linha.
    if(contadorDelinha%4==0):
        cpf = linha.strip('\n')
    elif(contadorDelinha%4==1):
        nome = linha.strip('\n')
    elif(contadorDelinha%4==2):
        endereco = linha.strip('\n')
    elif(contadorDelinha%4==3):
        telefone = linha.strip('\n')
        novoCliente = Cliente(cpf,nome,endereco,telefone)
        clientes.append(novoCliente)
    contadorDelinha = contadorDelinha + 1
#Fecha o arquivo após extrair todos os dados nele existentes.
arquivo.close()

# Criando a janela
janela = tk.Tk()
# Configurando o título da janela
janela.title("Cadastro de Cliente - Supermercado")
# Configurando as dimensões da janela
janela.geometry("900x600")
# Adicionando um label na janela
labelCliente = tk.Label(janela, text="Clientes: ")
labelCliente.place(x=10,y=10)
#Adicionando um combo no cliente
inp_var = tk.StringVar()
vetorOpcoes = []
for i in  clientes:
    nome = i.nome
    vetorOpcoes.append(nome)
comboCliente = ttk.Combobox(janela,values=vetorOpcoes)
comboCliente.current()
comboCliente.place(x=110,y=10)
botaoCarregar = tk.Button(janela, text="Carregar",command=lambda:carregarClientes())
botaoCarregar.place(x=400, y=10)
#Adicionando as informações referentes ao nome do Cliente
labelNome = tk.Label(janela, text="Nome: ")
labelNome.place(x=10,y=50)
textoNome = tk.Text(janela,width=50, height=1)
textoNome.place(x=110,y=50)
#Adicionando as informações referentes ao CPF do Cliente
labelCPF = tk.Label(janela, text="CPF:")
labelCPF.place(x=10, y=80)
textoCPF = tk.Text(janela,width=50, height=1)
textoCPF.place(x=110, y=80)
#Adicionando as informações referentes ao endereço do Cliente
labelEndereco = tk.Label(janela, text="Endereço:")
labelEndereco.place(x=10,y=110)
textoEndereço = tk.Text(janela,width=50,height=1)
textoEndereço.place(x=110, y=110)
#Adicionando as informações referentes ao telefone do Cliente
labelTelefone = tk.Label(janela, text="Telefone:")
labelTelefone.place(x=10,y=140)
textoTelefone = tk.Text(janela,width=50,height=1)
textoTelefone.place(x=110,y=140)
#Adicionando um botão a nossa tela
botaoInserir = tk.Button(janela, text="Inserir",command=lambda:inserirClientes())
botaoInserir.place(x=50, y=170)
botaoApagar = tk.Button(janela, text="Apagar",command=lambda:apagarClientes())
botaoApagar.place(x=150, y=170)
botaoAlterar = tk.Button(janela, text="Alterar",command=lambda:alterarClientes())
botaoAlterar.place(x=250,y=170)
botaoSair = tk.Button(janela, text="Sair",command=lambda:gravarArquivo())
botaoSair.place(x=350,y=170)

# Executando o loop principal da janela
janela.mainloop()